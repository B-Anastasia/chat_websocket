{"version":3,"sources":["api.ts","chat-reducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["api","socket","createConnection","this","io","subscribe","initMessagesHandler","newMessageSentHandler","userTypingHandler","on","destroyConnection","disconnect","sendName","name","emit","sendMessage","message","err","alert","typeMessage","initialState","messages","typingUsers","App","console","log","useSelector","state","chat","dispatch","useDispatch","useState","setMessage","setName","autoScrollActive","setAutoScrollActive","lastScrollTop","setLastScrollTop","myRefAnchor","useRef","useEffect","fn","type","messagesReceived","newMessageReceived","user","typingUsersAdded","current","scrollIntoView","behavior","className","onScroll","e","element","currentTarget","maxScrollPosition","scrollHeight","clientHeight","scrollTop","Math","abs","map","m","uuidv4","u","ref","value","onChange","onClick","sendClientName","onKeyPress","cols","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","id","userId","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0443def.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nimport {MessageType} from \"./App\";\r\n\r\n// const socket = io(\"https://chat-back-io.herokuapp.com/\");\r\n\r\nexport const api = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n\r\n    createConnection() {\r\n        // this.socket = io(\"http://localhost:3009/\");\r\n        this.socket = io(\"https://chat-back-io.herokuapp.com/\");\r\n    },\r\n    subscribe(initMessagesHandler: (messages: MessageType[], fn:(data: string)=>void) => void,\r\n              newMessageSentHandler: (message: MessageType) => void,\r\n              userTypingHandler: (user:any)=>void) {\r\n        this.socket?.on(\"init-messages-published\", initMessagesHandler);\r\n        this.socket?.on(\"new-message-sent\", newMessageSentHandler);\r\n        this.socket?.on(\"user-typing\", userTypingHandler);\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect();\r\n        this.socket = null;\r\n    },\r\n    sendName(name:string){\r\n        this.socket?.emit(\"client-name-sent\", name);\r\n    },\r\n    sendMessage(message:string){\r\n        this.socket?.emit(\"client-message-sent\", message, (err:string)=>{err && alert(err)});\r\n    },\r\n    typeMessage(){\r\n        this.socket?.emit(\"client-typed\");\r\n    }\r\n};","import {MessageType} from \"./App\";\r\nimport {api} from \"./api\";\r\n\r\ntype InitialStateType = {\r\n    messages: MessageType[];\r\n    typingUsers: any[];\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    messages: [],\r\n    typingUsers: [],\r\n};\r\n\r\nexport const chatReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"messages-received\": {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case \"new-message-received\": {\r\n            return {...state, messages: [...state.messages, action.message],\r\n            typingUsers: state.typingUsers.filter(u=>u.id!==action.message.userId)}\r\n        }\r\n        case \"typing-user-added\": {\r\n            return {\r\n                ...state,\r\n                typingUsers: [...state.typingUsers.filter(u => u.id !== action.user.id), action.user]\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nconst messagesReceived = (messages: MessageType[]) => ({type: \"messages-received\", messages});\r\nconst newMessageReceived = (message: MessageType) => ({type: \"new-message-received\", message});\r\nconst typingUsersAdded = (user: any) => ({type: \"typing-user-added\", user});\r\n\r\nexport const createConnection = () => (dispatch: any) => {\r\n\r\n    api.createConnection();\r\n    api.subscribe(\r\n        (messages: MessageType[], fn: (data: string)=>void) => {\r\n            dispatch(messagesReceived(messages));\r\n            fn(\"data from front\");\r\n        },\r\n        (message: MessageType) => {\r\n            dispatch(newMessageReceived(message))\r\n        },\r\n        (user) => {\r\n            dispatch(typingUsersAdded(user))\r\n        }\r\n    )\r\n}\r\nexport const destroyConnection = () => (dispatch: any) => {\r\n    api.destroyConnection();\r\n}\r\n\r\nexport const sendClientName = (name: string) => (dispatch: any) => {\r\n    api.sendName(name);\r\n}\r\nexport const sendMessage = (message: string) => (dispatch: any) => {\r\n    api.sendMessage(message);\r\n}\r\n\r\nexport const typeMessage = () => (dispatch: any) => {\r\n    api.typeMessage();\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport './App.css';\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createConnection, destroyConnection, sendClientName, sendMessage, typeMessage,} from \"./chat-reducer\";\r\nimport {AppStateType} from \"./index\";\r\n\r\nexport type MessageType = {\r\n    id: string;\r\n    name: string;\r\n    userId: string;\r\n    message: string;\r\n}\r\n\r\n\r\nfunction App() {\r\n    console.log('rendered');\r\n    const messages = useSelector<AppStateType, MessageType[]>((state) => state.chat.messages);\r\n    const typingUsers = useSelector<AppStateType, any[]>((state) => state.chat.typingUsers);\r\n    const dispatch = useDispatch();\r\n    const [message, setMessage] = useState(\"Hello\");\r\n    const [name, setName] = useState(\"Nastya\");\r\n    const [autoScrollActive, setAutoScrollActive] = useState(true);\r\n    const [lastScrollTop, setLastScrollTop] = useState(0);\r\n    const myRefAnchor = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        dispatch(createConnection());\r\n        return () => {\r\n            dispatch(destroyConnection());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (autoScrollActive) {\r\n            myRefAnchor.current?.scrollIntoView({behavior: \"smooth\"});\r\n        }\r\n    }, [messages,typingUsers, autoScrollActive]);\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <div className=\"App-content\">\r\n                <div className=\"messages\" onScroll={(e) => {\r\n                    let element = e.currentTarget;\r\n                    const maxScrollPosition = element.scrollHeight - element.clientHeight;\r\n                    if (element.scrollTop > lastScrollTop && Math.abs(maxScrollPosition - element.scrollTop) < 10) {\r\n                        setAutoScrollActive(true);\r\n                    } else {\r\n                        setAutoScrollActive(false);\r\n                    }\r\n                    setLastScrollTop(element.scrollTop);\r\n                }}>\r\n                    {messages.map((m: MessageType) => {\r\n                        return <div key={uuidv4()}>\r\n                            <b>{m.name}:</b>{m.message}\r\n                        </div>\r\n                    })}\r\n                    {typingUsers.map(u=>{\r\n                        return <div>\r\n                            <b>{u.name}</b> ...\r\n                        </div>\r\n                    })}\r\n                    <div ref={myRefAnchor}/>\r\n                </div>\r\n                <div>\r\n                    <input value={name} onChange={e => setName(e.currentTarget.value)}/>\r\n                    <button onClick={() => {\r\n                        dispatch(sendClientName(name));\r\n                    }}>Send name\r\n                    </button>\r\n                </div>\r\n                <div className=\"message\">\r\n                    <textarea value={message}\r\n                              onKeyPress={()=>{\r\n                                  dispatch(typeMessage())\r\n                              }}\r\n                              onChange={(e) => setMessage(e.currentTarget.value)}\r\n                              cols={20}\r\n                              rows={5}/>\r\n                    <button onClick={() => {\r\n                        dispatch(sendMessage(message));\r\n                        setMessage(\"\");\r\n                    }}>Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {chatReducer} from \"./chat-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet rootReducer = combineReducers({chat: chatReducer});\r\n\r\nexport type AppStateType =ReturnType<typeof rootReducer>;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nstore.subscribe(()=>{\r\n    console.log(\"state changed\");\r\n})\r\nstore.subscribe(()=>{\r\n    console.log(\"state changed 1\");\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}